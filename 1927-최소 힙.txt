import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;

class Heap{
	private int N = 0;
	protected int[] minPQ;
	
	public Heap(int size) {
		minPQ = new int[size + 1];
	}
	
	public int size() {return N;}
	
	public void insert(int x) {
		minPQ[++N] = x;
		upheap(N);
	}
	
	public void swap(int i, int j) {
		int tmp = minPQ[i];
		minPQ[i] = minPQ[j];
		minPQ[j] = tmp;
	}
	
	public boolean less(int i, int j) {
		if (minPQ[i] < minPQ[j]) return true;
		return false;
	}
	
	public int deleteMin() {
		int min = minPQ[1];
		swap(1, N--);
		downheap(1);
		minPQ[N + 1] = 0;
		return min;
	}
	
	public void upheap(int k) {
		while (k > 1 && less(k, k/2)) {
			swap(k, k/2);
			k = k / 2;
		}
	}
	
	public void downheap(int k) {
		while (2 * k <= N) {
			int j = 2 * k;
			if (j < N && less(j + 1, j)) j++;
			if (!less(j, k)) {
				break;
			}
			swap(j, k);
			k = j;
		}
	}
}

public class Main {
	
	public static void main(String[] args) throws Exception {
		BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter out = new BufferedWriter(new OutputStreamWriter(System.out));
		
		int testcase = Integer.parseInt(in.readLine());
		Heap minheap = new Heap(testcase);
				
		for (int i = 0; i < testcase; i++) {
			int order = Integer.parseInt(in.readLine());
			if (order == 0) {
				if (minheap.size() == 0) out.write("0\n");
				else {
					out.write(Integer.toString(minheap.deleteMin()) + "\n");
				}
			}
			else {
				minheap.insert(order);
			}
		}
		out.flush();
		out.close();
	}

}
